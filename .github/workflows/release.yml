name: Release

on:
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
    build-and-publish:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            # docker build and transfer - start
            - name: Build Docker image
              run: |
                  docker build -t my-server-nginx:${{ github.sha }} .
                  docker save my-server-nginx:${{ github.sha }} | gzip > my-server-nginx-${{ github.sha }}.tar.gz

            - name: Transfer image to VM
              uses: appleboy/scp-action@v1.0.0
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.PORT }}
                  source: 'my-server-nginx-${{ github.sha }}.tar.gz'
                  target: '/tmp/'
            # docker build and transfer - end

    remote-deploy:
        runs-on: ubuntu-latest
        needs: [build-and-publish]
        steps:
            - name: executing remote ssh commands using password
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.PORT }}
                  script: |
                      # Set error handling
                      set -e

                      if [ -x "$(command -v docker)" ]; then
                        echo "Docker is already installed"
                      else
                        curl -fsSL https://get.docker.com -o get-docker.sh
                        sh get-docker.sh

                        sudo systemctl enable docker
                        sudo systemctl start docker
                        sudo chmod 666 /var/run/docker.sock
                      fi

                      # Install docker-compose if not present
                      if [ -x "$(command -v docker-compose)" ]; then
                        echo "Docker Compose is already installed"
                      else
                        echo "Installing Docker Compose..."
                        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                        echo "Docker Compose installed successfully"
                      fi

                      echo "=== Starting deployment process ==="

                      echo "=== Ensuring ~/my-server-nginx directory exists ==="
                      mkdir -p ~/my-server-nginx
                      cd ~/my-server-nginx

                      echo "=== Loading Docker image from transferred file ==="
                      docker load < /tmp/my-server-nginx-${{ github.sha }}.tar.gz
                      echo "✓ Docker image loaded successfully"

                      echo "=== Cleaning up transferred file ==="
                      rm -f /tmp/my-server-nginx-${{ github.sha }}.tar.gz
                      echo "✓ Transferred file cleaned up"

                      echo "=== Downloading configuration files for tag ${{ github.ref_name }} ==="
                      curl -o docker-compose.yml https://raw.githubusercontent.com/levabala/my-server-nginx/${{ github.ref_name }}/docker-compose.yml
                      echo "✓ docker-compose.yml downloaded"

                      curl -o init-letsencrypt.sh https://raw.githubusercontent.com/levabala/my-server-nginx/${{ github.ref_name }}/init-letsencrypt.sh
                      echo "✓ init-letsencrypt.sh downloaded"
                      chmod +x init-letsencrypt.sh
                      echo "✓ Made init-letsencrypt.sh executable"

                      echo "=== Creating .env file ==="
                      echo "DOCKER_IMAGE=my-server-nginx:${{ github.sha }}" > .env
                      echo "✓ .env file created"
                      
                      echo "=== Starting services ==="
                      docker-compose up -d
                      echo "✓ Services started"
                      
                      echo "✅ DEPLOYMENT SUCCESSFUL"
                      
                      echo "=== Cleaning up old images ==="
                      docker image prune -f || true

                      echo "=== Final container status ==="
                      docker-compose ps

                      echo "=== Final nginx logs ==="
                      docker-compose logs nginx | tail -20

                      echo "=== Deployment completed successfully ==="
